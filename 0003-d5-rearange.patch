From 5ea218c4120b1c3f75c3c256abea3b3eb7261264 Mon Sep 17 00:00:00 2001
From: Filip Lobpreis <f.lobpreis@gmail.com>
Date: Mon, 5 Dec 2022 09:34:35 +0100
Subject: [PATCH 3/3] rearange

Signed-off-by: Filip Lobpreis <f.lobpreis@gmail.com>
---
 main.cpp     | 101 ---------------------------------------------------
 src/day5.cpp |  81 +++++++++++++++++++++++++++++++++++++++++
 src/day5.h   |  15 ++++++++
 3 files changed, 96 insertions(+), 101 deletions(-)

diff --git a/main.cpp b/main.cpp
index 889a237..d907900 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,25 +1,4 @@
 #include "day5.h"
-#include <algorithm>
-#include <iostream>
-#include <stack>
-#include <string>
-#include <vector>
-
-struct step
-{
-	int move;
-	int from;
-	int to;
-};
-
-std::vector<char> readStack(std::string str);
-step fillProcecureStep(const std::string &str);
-void vprint(const std::vector<char> &v);
-void sprint(const step &s);
-std::vector<std::string> split(const std::string &str, const std::string &delim);
-std::vector<std::stack<char>> populateStack(std::vector<std::vector<char>> &data);
-void printTops(const std::vector<std::stack<char>> &data);
-
 
 int main(int argc, char *argv[])
 {
@@ -77,83 +56,3 @@ int main(int argc, char *argv[])
 	return 0;
 }
 
-std::vector<char> readStack(std::string str)
-{
-	std::vector<char> out((str.size()+1)/4);
-	for (size_t i = 0; i < str.size(); i++) {
-		if (str[i] == '[') {
-			out[i/4] = str[i+1];
-			i++;
-		}
-	}
-	return out;
-}
-
-void vprint(const std::vector<char> &v)
-{
-	for(auto var : v) {
-		if (var == 0) {
-			std::cout << 0;
-		}
-		else {
-			std::cout << var;
-		}
-		std::cout << " ";
-	}
-	std::cout << std::endl;
-}
-
-step fillProcecureStep(const std::string &str)
-{
-	step s;
-	auto splited = split(str, " ");
-	s.move = std::stoi(splited[1]);
-	s.from = std::stoi(splited[3]);
-	s.to = std::stoi(splited[5]);
-	return s;
-}
-
-void sprint(const step &s)
-{
-	std::cout << "move: " << s.move << " from: " << s.from << " to: " << s.to << std::endl;
-}
-
-std::vector<std::string> split(const std::string &str, const std::string &delim)
-{
-	size_t pos_start = 0, pos_end, delim_len = delim.length();
-	std::string token;
-	std::vector<std::string> res;
-
-	while ((pos_end = str.find (delim, pos_start)) != std::string::npos) {
-		token = str.substr (pos_start, pos_end - pos_start);
-		pos_start = pos_end + delim_len;
-		res.push_back (token);
-	}
-
-	res.push_back(str.substr (pos_start));
-	return res;
-}
-
-std::vector<std::stack<char>> populateStack(std::vector<std::vector<char>> &data)
-{
-	std::vector<std::stack<char>> out(data[0].size());
-	for (auto i = data.crbegin(); i != data.crend(); i++) {
-		for (auto j = 0; j < i->size(); j++) {
-			if (i->at(j) != 0) {
-				out[j].push(i->at(j));
-			}
-		}
-	}
-	return out;
-}
-
-void printTops(const std::vector<std::stack<char>> &data)
-{
-	for(auto s : data) {
-		if (!s.empty()) {
-			std::cout << s.top() << " ";
-		}
-	}
-	std::cout << std::endl;
-}
-
diff --git a/src/day5.cpp b/src/day5.cpp
index fdbcb9e..88f22cb 100644
--- a/src/day5.cpp
+++ b/src/day5.cpp
@@ -1,2 +1,83 @@
 #include "day5.h"
 
+std::vector<char> readStack(std::string str)
+{
+	std::vector<char> out((str.size()+1)/4);
+	for (size_t i = 0; i < str.size(); i++) {
+		if (str[i] == '[') {
+			out[i/4] = str[i+1];
+			i++;
+		}
+	}
+	return out;
+}
+
+void vprint(const std::vector<char> &v)
+{
+	for(auto var : v) {
+		if (var == 0) {
+			std::cout << 0;
+		}
+		else {
+			std::cout << var;
+		}
+		std::cout << " ";
+	}
+	std::cout << std::endl;
+}
+
+step fillProcecureStep(const std::string &str)
+{
+	step s;
+	auto splited = split(str, " ");
+	s.move = std::stoi(splited[1]);
+	s.from = std::stoi(splited[3]);
+	s.to = std::stoi(splited[5]);
+	return s;
+}
+
+void sprint(const step &s)
+{
+	std::cout << "move: " << s.move << " from: " << s.from << " to: " << s.to << std::endl;
+}
+
+std::vector<std::string> split(const std::string &str, const std::string &delim)
+{
+	size_t pos_start = 0, pos_end, delim_len = delim.length();
+	std::string token;
+	std::vector<std::string> res;
+
+	while ((pos_end = str.find (delim, pos_start)) != std::string::npos) {
+		token = str.substr (pos_start, pos_end - pos_start);
+		pos_start = pos_end + delim_len;
+		res.push_back (token);
+	}
+
+	res.push_back(str.substr (pos_start));
+	return res;
+}
+
+std::vector<std::stack<char>> populateStack(std::vector<std::vector<char>> &data)
+{
+	std::vector<std::stack<char>> out(data[0].size());
+	for (auto i = data.crbegin(); i != data.crend(); i++) {
+		for (auto j = 0; j < i->size(); j++) {
+			if (i->at(j) != 0) {
+				out[j].push(i->at(j));
+			}
+		}
+	}
+	return out;
+}
+
+void printTops(const std::vector<std::stack<char>> &data)
+{
+	for(auto s : data) {
+		if (!s.empty()) {
+			std::cout << s.top() << " ";
+		}
+	}
+	std::cout << std::endl;
+}
+
+
diff --git a/src/day5.h b/src/day5.h
index 5f3f664..b6c3554 100644
--- a/src/day5.h
+++ b/src/day5.h
@@ -16,3 +16,18 @@ public:
 
 };
 
+struct step
+{
+	int move;
+	int from;
+	int to;
+};
+
+std::vector<char> readStack(std::string str);
+step fillProcecureStep(const std::string &str);
+void vprint(const std::vector<char> &v);
+void sprint(const step &s);
+std::vector<std::string> split(const std::string &str, const std::string &delim);
+std::vector<std::stack<char>> populateStack(std::vector<std::vector<char>> &data);
+void printTops(const std::vector<std::stack<char>> &data);
+
-- 
2.34.1

